{"name": "登录", "status": "failed", "statusDetails": {"message": "AssertionError: 错误信息：Traceback (most recent call last):\n  File \"D:\\Pytest_API\\comm\\check_result.py\", line 53, in test_check_result\n    assert str(expected_code) == str(actual_code)\nAssertionError", "trace": "self = <comm.check_result.Check_Result object at 0x0000015F12171450>\nvalidate = {'check_mode': 'check_code', 'expected_code': 206, 'expected_desc': {'$..msg': '请求未授权'}, 'expected_format': {'code': 101058, 'data': {}, 'success': False}}\nresponse = [401, '{\"msg\":\"请求未授权\",\"code\":401,\"data\":null}']\n\n    def test_check_result(self,validate,response):\n        \"\"\"\n        校验预期结果与实际结果是否一致\n        \"\"\"\n    \n        if response ==None:\n            with allure.step(\"验证信息\"):\n                allure.attach(name=\"待核验信息\", body=str(validate))\n                allure.attach(name=\"检查模式\", body=str(validate['check_mode']))\n                allure.attach(name=\"预期响应码\", body=str(validate['expected_code']))\n                allure.attach(name=\"待核验字段信息\", body=str(validate['expected_desc']))\n                allure.attach(name=\"预期数据--数据格式\", body=str(validate['expected_format']))\n                allure.attach(name=\"实际数据\", body=str(response))\n                allure.attach(name=\"验证结果\", body=str('通过' if validate == response else '失败'))\n    \n    \n            assert validate == response\n            log.info('\\n待核验信息：{0} \\n实际数据：{1} \\n校验结果：'.format(validate,  response,('通过' if validate == response else '失败')))\n    \n    \n        else:\n            response = json.loads(response)\n    \n            if validate['check_mode'] == 'no_check':\n                with allure.step(\"验证信息--不校验接口结果\"):\n                    pass\n    \n    \n            elif validate['check_mode'] == 'check_code':\n                expected_code = validate['expected_code']\n                actual_code = response[0]\n    \n                with allure.step(\"验证信息--校验响应码\"):\n                    allure.attach(name=\"待核验信息\", body=str(validate))\n                    allure.attach(name=\"检查模式\", body=str(validate['check_mode']))\n                    allure.attach(name=\"预期响应码\", body=str(validate['expected_code']))\n                    allure.attach(name=\"实际响应码\", body=str(response[0]))\n                try:\n>                   assert str(expected_code) == str(actual_code)\nE                   AssertionError\n\ncomm\\check_result.py:53: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <comm.testcase_parameter.Testcase_Suite object at 0x0000015F126CE920>\ncase = {'api_name': '登录', 'case_id': 2, 'case_name': '登录失败', 'cookies': False, ...}\n\n    @pytest.mark.parametrize('case', cases)\n    def testcase_parameter(self,case):\n        try:\n            case_id = case['case_id']\n            api_name = case['api_name']\n            case_name = case['case_name']\n            level = case['level']\n            premise_caseid = case['premise_caseid']\n            premise_key = case['premise_key']\n            relevance_field = case['relevance_field']\n            api_url = case['url']\n            method = case['method']\n            data = case['data']\n            headers = case['headers']\n            mime_type = case['mime_type']\n            files = case['files']\n            cookies = case['cookies']\n            timeout = case['timeout']\n            validate = case['validate']\n            host = p.get_url_parameter()\n            url = host + api_url\n    \n    \n    \n    \n        except Exception as e:\n            log.error(traceback.format_exc())\n            raise KeyError('获取用例基本信息失败：{}'.format(e))\n    \n        log.info(\"*\" * 200)\n        log.info(\"用例id：%s\" % str(case_id))\n        log.info(\"接口名称：%s\" % str(api_name))\n        log.info(\"用例名称：%s\" % str(case_name))\n        log.info(\"前置用例：%s\" % str(premise_caseid))\n        log.info(\"前置用例响应数据：%s\" % str(premise_key))\n        log.info(\"数据依赖字段：%s\" % str(relevance_field))\n        log.info(\"api_url：%s\" % str(api_url))\n        log.info(\"请求地址：%s\" % str(url))\n        log.info(\"请求方式：%s\" % str(method))\n        log.info(\"请求数据：%s\" % str(data))\n        log.info(\"请求头信息：%s\" % str(headers))\n        log.info(\"参数媒体类型：%s\" % str(mime_type))\n        log.info(\"上传文件：%s\" % str(files))\n        log.info(\"cookies：%s\" % str(cookies))\n        log.info(\"超时时长：%s\" % str(timeout))\n        log.info(\"待核验信息：%s\" % str(validate))\n    \n    \n    \n        if premise_caseid:\n            with allure.step(\"前置条件：\"):\n                allure.attach(name=\"前置条件--依赖caseid\", body=str(premise_caseid))\n                allure.attach(name=\"前置条件--依赖字段key\", body=str(premise_key))\n                allure.attach(name=\"前置条件--关联字段key\", body=str(relevance_field))\n                allure.dynamic.description(case_name)\n                allure.dynamic.severity(level)\n                allure.dynamic.title(api_name)\n                allure.dynamic.description(case_name)\n                allure.dynamic.link(name='百度首页地址', url='https://www.baidu.com/')\n    \n            response = de.get_dependent_case(case_id)\n    \n            with allure.step(\"请求数据信息：\"):\n                allure.attach(name=\"请求地址\", body=url)\n                allure.attach(name=\"请求头信息\", body=str(headers))\n                allure.attach(name=\"请求数据\", body=str(data))\n                allure.attach(name=\"上传文件信息\", body=str(files))\n                allure.attach(name=\"请求数据响应信息\", body=str( response if response==None else json.loads(response)))\n    \n    \n            log.info('用例参数化--附带前置用例,请求响应信息:{0}'.format(response if response==None else json.loads(response)))\n    \n            cr.test_check_result(validate,response)\n    \n    \n        else:\n            response = r.run_main(method=method, url=url, data=data, headers=headers, mime_type=mime_type, files=files)\n    \n            with allure.step(\"请求数据信息：\"):\n                allure.attach(name=\"请求地址\", body=url)\n                allure.attach(name=\"请求头信息\", body=str(headers))\n                allure.attach(name=\"请求数据\", body=str(data))\n                allure.attach(name=\"上传文件信息\", body=str(files))\n                allure.attach(name=\"请求响应信息\", body=str(json.loads(response)))\n                allure.dynamic.description(case_name)\n                allure.dynamic.severity(level)\n                allure.dynamic.title(api_name)\n    \n            log.info(\"\\n请求响应信息： %s\" % json.loads(response))\n>           cr.test_check_result(validate,response)\n\ncomm\\testcase_parameter.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <comm.check_result.Check_Result object at 0x0000015F12171450>\nvalidate = {'check_mode': 'check_code', 'expected_code': 206, 'expected_desc': {'$..msg': '请求未授权'}, 'expected_format': {'code': 101058, 'data': {}, 'success': False}}\nresponse = [401, '{\"msg\":\"请求未授权\",\"code\":401,\"data\":null}']\n\n    def test_check_result(self,validate,response):\n        \"\"\"\n        校验预期结果与实际结果是否一致\n        \"\"\"\n    \n        if response ==None:\n            with allure.step(\"验证信息\"):\n                allure.attach(name=\"待核验信息\", body=str(validate))\n                allure.attach(name=\"检查模式\", body=str(validate['check_mode']))\n                allure.attach(name=\"预期响应码\", body=str(validate['expected_code']))\n                allure.attach(name=\"待核验字段信息\", body=str(validate['expected_desc']))\n                allure.attach(name=\"预期数据--数据格式\", body=str(validate['expected_format']))\n                allure.attach(name=\"实际数据\", body=str(response))\n                allure.attach(name=\"验证结果\", body=str('通过' if validate == response else '失败'))\n    \n    \n            assert validate == response\n            log.info('\\n待核验信息：{0} \\n实际数据：{1} \\n校验结果：'.format(validate,  response,('通过' if validate == response else '失败')))\n    \n    \n        else:\n            response = json.loads(response)\n    \n            if validate['check_mode'] == 'no_check':\n                with allure.step(\"验证信息--不校验接口结果\"):\n                    pass\n    \n    \n            elif validate['check_mode'] == 'check_code':\n                expected_code = validate['expected_code']\n                actual_code = response[0]\n    \n                with allure.step(\"验证信息--校验响应码\"):\n                    allure.attach(name=\"待核验信息\", body=str(validate))\n                    allure.attach(name=\"检查模式\", body=str(validate['check_mode']))\n                    allure.attach(name=\"预期响应码\", body=str(validate['expected_code']))\n                    allure.attach(name=\"实际响应码\", body=str(response[0]))\n                try:\n                    assert str(expected_code) == str(actual_code)\n                except AssertionError as e:\n                    log.error('\\n预期响应码:{0} \\n实际响应码:{1} \\n错误信息:{2}'.format(expected_code, actual_code,\n                                                                                        traceback.format_exc()))\n>                   raise AssertionError('错误信息：{}'.format(traceback.format_exc()))\nE                   AssertionError: 错误信息：Traceback (most recent call last):\nE                     File \"D:\\Pytest_API\\comm\\check_result.py\", line 53, in test_check_result\nE                       assert str(expected_code) == str(actual_code)\nE                   AssertionError\n\ncomm\\check_result.py:57: AssertionError"}, "description": "登录失败", "steps": [{"name": "请求数据信息：", "status": "passed", "attachments": [{"name": "请求地址", "source": "ef6b68b2-d6ae-4a94-bf39-491abf3d20b0-attachment.attach"}, {"name": "请求头信息", "source": "5be2a2b6-23ce-4a20-a9a9-971579c1ca29-attachment.attach"}, {"name": "请求数据", "source": "6b186d83-a433-49f8-997a-398aeab4c9a9-attachment.attach"}, {"name": "上传文件信息", "source": "3b2b9c70-dab8-4fd5-a8e6-381df57f7d13-attachment.attach"}, {"name": "请求响应信息", "source": "e33da1a7-18b3-4c55-8c25-75060bfd0a28-attachment.attach"}], "start": 1692607344039, "stop": 1692607344042}, {"name": "验证信息--校验响应码", "status": "passed", "attachments": [{"name": "待核验信息", "source": "63708578-ed6c-463e-8846-7c4f0a2a73e4-attachment.attach"}, {"name": "检查模式", "source": "a2f95d97-5cca-4701-8fcb-28f00b499f1b-attachment.attach"}, {"name": "预期响应码", "source": "dd0f0e21-46ab-47e3-a272-7cd09dd05081-attachment.attach"}, {"name": "实际响应码", "source": "0a3f6865-2b53-4f34-af72-b2ae01e0c9a1-attachment.attach"}], "start": 1692607344043, "stop": 1692607344046}], "attachments": [{"name": "log", "source": "f7c042cc-6258-4e38-8749-7f234266453e-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'case_id': 2, 'api_name': '登录', 'case_name': '登录失败', 'is_run': True, 'level': 'critical', 'premise_caseid': None, 'premise_key': 'detail.type', 'relevance_field': 'remark', 'url': 'api/ld-erps/deptoptionalpackage/submit', 'method': 'post', 'data': {'deptBrandId': '1500010931297513473', 'deptFirmId': '1500010984066052098', 'deptSeriesId': '1500011053616001025', 'packageName': '国庆节', 'packageCode': '大礼包', 'remark': '十月'}, 'headers': {'Content-Type': 'application/json;charset=UTF-8', 'Authorization': 'Basic c2FiZXI6bGRAMTIzNDU2', 'Blade-Auth': 'bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiI2ODMyNTIiLCJ0ZW5hbnRfbmFtZSI6Iua8lOekuuenn-aItyjmlbDmja7lvILluLjmmoLlgZzkvb_nlKgpIiwidXNlcl9uYW1lIjoiYWRtaW4iLCJkZXB0X25hbWUiOiLmvJTnpLrnp5_miLciLCJyZWFsX25hbWUiOiJhZG1pbiIsImF2YXRhciI6InVwbG9hZC8yMDIyMDExMi8zZTg3ZDI2YzZhMzUxOWM5YmM5N2YwM2I2Y2E0N2E3OS5wbmciLCJhdXRob3JpdGllcyI6WyJhZG1pbiJdLCJjbGllbnRfaWQiOiJzYWJlciIsInJvbGVfbmFtZSI6ImFkbWluIiwicG9zdF9pZCI6IjE0ODEyMDc0NTI2NzU5NDQ0NDkiLCJ1c2VyX2lkIjoiMTQ3MzQ4MjMxOTgxNzk2OTY2NSIsInJvbGVfaWQiOiIxNDczNDgyMzEwNTQwNjU2NjQxIiwicG9zdF9uYW1lIjoiY2VvIiwic2NvcGUiOlsiYWxsIl0sIm5pY2tfbmFtZSI6ImFkbWluIiwib2F1dGhfaWQiOiIiLCJkZXRhaWwiOnsidHlwZSI6IndlYiJ9LCJleHAiOjE2ODk2ODAxMzEsImRlcHRfaWQiOiIxNDczNDgyMzE0MzcwMDU2MTk0IiwicG93ZXJlZCBieSBsZCI6InBvd2VyZWQgYnkgYmxhZGV4IiwianRpIjoiNjY4NDAwOGEtYWUwMi00YzQ0LWE2OWItY2FiYzdkZjY3ZWUzIiwiYWNjb3VudCI6ImFkbWluIn0.u01NTOYLZSSCyoUsKowvKEWyTW_1qDeBXqdszhQkbxw', 'Cookie': 'saber-refresh-token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiI2ODMyNTIiLCJ0ZW5hbnRfbmFtZSI6Iua8lOekuuenn-aItyjmlbDmja7lvILluLjmmoLlgZzkvb_nlKgpIiwidXNlcl9uYW1lIjoiYWRtaW4iLCJkZXB0X25hbWUiOiLmvJTnpLrnp5_miLciLCJyZWFsX25hbWUiOiJhZG1pbiIsImF2YXRhciI6InVwbG9hZC8yMDIyMDExMi8zZTg3ZDI2YzZhMzUxOWM5YmM5N2YwM2I2Y2E0N2E3OS5wbmciLCJhdXRob3JpdGllcyI6WyJhZG1pbiJdLCJjbGllbnRfaWQiOiJzYWJlciIsInJvbGVfbmFtZSI6ImFkbWluIiwicG9zdF9pZCI6IjE0ODEyMDc0NTI2NzU5NDQ0NDkiLCJ1c2VyX2lkIjoiMTQ3MzQ4MjMxOTgxNzk2OTY2NSIsInJvbGVfaWQiOiIxNDczNDgyMzEwNTQwNjU2NjQxIiwicG9zdF9uYW1lIjoiY2VvIiwic2NvcGUiOlsiYWxsIl0sIm5pY2tfbmFtZSI6ImFkbWluIiwiYXRpIjoiNjY4NDAwOGEtYWUwMi00YzQ0LWE2OWItY2FiYzdkZjY3ZWUzIiwib2F1dGhfaWQiOiIiLCJkZXRhaWwiOnsidHlwZSI6IndlYiJ9LCJleHAiOjE2OTAyODEzMzEsImRlcHRfaWQiOiIxNDczNDgyMzE0MzcwMDU2MTk0IiwicG93ZXJlZCBieSBsZCI6InBvd2VyZWQgYnkgYmxhZGV4IiwianRpIjoiZTg1NDE0NGQtZTY5Zi00MGY3LWJjM2MtNTZjOTU1ZjEzNDFiIiwiYWNjb3VudCI6ImFkbWluIn0.J8qEnQvTnFrl-WQrJRmIuOq468SeHwenrHrph6J-U20', 'dept_id': '1473482314370056194', 'Tenant-Id': '683252'}, 'mime_type': 'application/json', 'files': {'图片1': 'C:\\\\Users\\\\asus\\\\Desktop\\\\1.jpg', '图片2': 'C:\\\\Users\\\\asus\\\\Desktop\\\\2.jpg'}, 'cookies': False, 'timeout': 10, 'validate': {'check_mode': 'check_code', 'expected_code': 206, 'expected_desc': {'$..msg': '请求未授权'}, 'expected_format': {'code': 101058, 'success': False, 'data': {}}}}"}], "start": 1692607342970, "stop": 1692607344054, "uuid": "d4dd9e63-a9a2-49ad-ab9f-82e8cf9779ce", "historyId": "49ccb18a938bc5637986ce89a2dadda1", "testCaseId": "50de78f06f8e376387dec188168c33d6", "fullName": "comm.testcase_parameter.Testcase_Suite#testcase_parameter", "labels": [{"name": "severity", "value": "critical"}, {"name": "epic", "value": "测试用例汇总"}, {"name": "story", "value": "参数化--测试用例"}, {"name": "feature", "value": "测试用例集合"}, {"name": "parentSuite", "value": "comm"}, {"name": "suite", "value": "testcase_parameter"}, {"name": "subSuite", "value": "Testcase_Suite"}, {"name": "host", "value": "LAPTOP-T1AV2QHS"}, {"name": "thread", "value": "2968-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "comm.testcase_parameter"}]}